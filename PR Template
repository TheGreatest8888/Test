<!--- Provide a general summary of your changes in the Title above with a suggested maximum of 50 Characters -->

## Description
<!--- Describe your changes in detail -->

## Motivation and Context (including Issue that is closed (Required))
<!--- Why is this change required? What problem does it solve? -->
<!--- Please link to closed issue here. -->

## How Has This Been Tested?
<!--- Please describe in detail how you tested your changes. -->
<!--- Include details of your testing environments, tests ran to see how -->
<!--- your change affects other areas of the code, etc. -->
<!--- Include details of unit testing, and code quality and vulnerability linting -->

## Screenshots (if appropriate):

## Types of changes
<!--- What types of changes does your code introduce?  -->
<!--- Put an `x` in all the boxes that apply by replacing the space in the box: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Release Procedures Checklist:
<!--- Go over all the following points, and Put an `x` in all the boxes that apply by replacing the space in the box: -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [ ] In the **[CHANGELOG](CHANGELOG.md)**, I have moved the previous entry(s) in Latest to immediately after "-- END LATEST --" with a single line buffer.
- [ ] I have added an anchor tag (i.e. [x.x.x]) to Latest entry based on **[semantic versioning](https://semver.org/)** principles.
- [ ] I have created and applied a Label to this Pull Request with the value matching the anchor tag in CHANGELOG.md.

## Checklist:
<!--- Go over all the following points, and Put an `x` in all the boxes that apply by replacing the space in the box: -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [ ] I verified that there are no duplicate pull requests.
- [ ] **I have committed my changes to a separate branch with a name that adheres to the Branch Strategy in the [working agreement](https://confluence.sys.cigna.com/display/DvOp/GitHub+Core+Working+Agreement#GitHubCoreWorkingAgreement-BranchingStrategy).**
- [ ] My commit message is descriptive and follows guidelines.
- [ ] I have read and followed guidance in the CONTRIBUTING document.
- [ ] **My code follows the code style of this project, and for python changes I have followed all guidelines in the [working agreement](https://confluence.sys.cigna.com/display/DvOp/GitHub+Core+Working+Agreement#GitHubCoreWorkingAgreement-PythonCodingPractices).**
- [ ] If my change requires a change to documentation, I have updated the documentation accordingly.
- [ ] All tests described above executed successfully.
- [ ] For New Features and Breaking changes I added new tests.
- [ ] **For new repositories, I certify that it is configured as to and follows all guidelines set forth in the [working agreement](https://confluence.sys.cigna.com/display/DvOp/GitHub+Core+Working+Agreement#GitHubCoreWorkingAgreement-Repositoryconfiguration).**



-PR Strategy-
PR's are opened as a Draft PR right at the beginning of development work to track changes and keep ongoing discussion. PR description should include relevant project details and a plan of attack for adding code commits to the PR.
Create Branch in repo
Make one edit in README.md, commit and push to repo
Open PR in Draft mode
Engineer currently working on a PR can also call ad-hoc "code reviews" to further dive into their direction and logic behind their decisions
Github users dashboard should be monitored for PR's that you've been requested or assigned to.
Draft PR creation steps:
The first commit in the repo should be a small change in README.md, CHANGELOG.md, CODEOWNER, or some other file meaningful to your project.  Each of these file should exist in each repo, so the first commit should include their creation if they do not exist.  Each of these files have templates which can be found in the ghct-github-template-docs repo in the github organization you are working in.
If the repo has a technology which requires a specific code owner file like G_GTHB_EDO_GHCT_KONG_CDOWNR, ensure that it's created as well
Verify that the CODEOWNER file references the proper code owner github team (G_GTHB_CIG_GHCT_CDOWNR or G_GTHB_EDO_GHCT_CDOWNR), and the line in CODEOWNER is not commented out
Then, Draft PR can be created
Once the PR is ready, you can click the button to "Mark ready for review"
At this time, because the code owner github teams are setup for auto assignment, and have been included in the CODEOWNER file, and that team has write permissions, 2 people on the team will be auto requested to the PR.
Once auto request has happened, the requested reviewers will receive an email requesting "..your review".  This means you will be doing the peer review.
The rest of the team will receive an email that requests review as a member of the code owners team.  You are encouraged to look at the PR and add comments if you like, but you are not required to do so.
The requested reviewers who were auto assigned are expected to complete their review within one business day.  i.e. 2:00 PM assignment on Wednesday requires response by 2:00 PM Thursday.
